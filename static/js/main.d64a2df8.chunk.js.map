{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","action.js","constants.js","index.js"],"names":["initialState","searchField","initialStateRobots","isPending","robots","error","Card","props","name","email","id","className","alt","src","CardList","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","logger","createLogger","rootReducer","combineReducers","action","console","log","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d64a2df8.chunk.js","sourcesContent":["import { \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    CHANGE_SEARCH_FIELD \n} from \"./constants\";\n\nconst initialState = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialState, action={}) => {\n    console.log(action.type);\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n            // There is another way of doing the above, called object spread:\n            // return { ...state, searchField: action.payload }\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false})\n        default:\n            return state\n    }\n}\n","import React from 'react';\nimport { shallow, mount, render } from 'enzyme';\n\nconst Card = (props) => {\n    const { name, email, id } = props\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}props.id?200x200`}></img>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    const cardComponent = robots.map((user, i) => {\n        return (\n            <Card \n                key={i} \n                id={robots[i].id} \n                name={robots[i].name} \n                email={robots[i].email} />\n            );\n        })\n    return (\n        <div>\n            {cardComponent}\n        </div>\n    )\n}\n\nexport default CardList","import React from 'react'\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type=\"search\" \n                placeholder='search robots'\n                onChange={ searchChange } \n            />\n        </div>\n    );\n}\n\nexport default SearchBox\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '1000px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React, { Component } from 'react'\n\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return (<h1>Ooops. That is not good </h1>)\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n    constructor() {\n        super()\n        this.state = {\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.state.count !== nextState.count) {\n            return true\n        } else {\n            return false;\n        }\n        \n    }\n\n    updateCount = () => {\n        this.setState(state =>  {\n            return {count: this.state.count + 1}\n        })\n    }\n\n    render() {\n        return (\n            <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\n        )\n    }\n}\n\nexport default CounterButton;\n","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false\n    }\n    render() {\n        return (\n            <div>\n                <h1 className='f1'>RoboFriends</h1>\n                <CounterButton color={'red'} />\n            </div>  \n        );\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../action';\n\nconst mapStateToProps = (state) => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return { \n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render () {\n        const { searchField, onSearchChange, robots, isPending } = this.props\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n        });\n        return (isPending) ? \n        <h1>Loading...</h1> : \n        (\n            <div className='tc'>\n                <Header />\n                <SearchBox searchChange={onSearchChange} />\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={ filteredRobots } />        \n                    </ErrorBoundry>\n                </Scroll>\n            </div>   \n        );        \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    CHANGE_SEARCH_FIELD \n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n        type: CHANGE_SEARCH_FIELD,\n        payload: text \n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = \n    createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n"],"sourceRoot":""}